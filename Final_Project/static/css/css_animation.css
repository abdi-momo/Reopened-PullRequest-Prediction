/*There'll be three bars under each other and we'll give them a fancy transition with a cubic-bezier transition.
I often use this CSS animation tool to produce cool transitions, you can choose from some pre-build transitions or make your custom one easily.*/
#sidebarCollapse {
    width: 40px;
    height: 40px;
    background: #f5f5f5;
}

#sidebarCollapse span {
    width: 80%;
    height: 2px;
    margin: 0 auto;
    display: block;
    background: #555;
    transition: all 0.8s cubic-bezier(0.810, -0.330, 0.345, 1.375);
}
/* When the sidebar is open, the toggle button bars will be crossed. When it's off the canvas, the bars will be parallel to each other.

By default, the sidebar will be open, so the initial state of the bars should be crossed.
We'll use transform property to achieve that. The first bar will be rotated by 45 degrees, the last bar will be rotated by 45 degrees in the opposite direction.
The second bar will be hidden in this moment.  */

#sidebarCollapse span:first-of-type {
    /* rotate first one */
    transform: rotate(45deg) translate(2px, 2px);
}
#sidebarCollapse span:nth-of-type(2) {
    /* second one is not visible */
    opacity: 0;
}
#sidebarCollapse span:last-of-type {
    /* rotate third one */
    transform: rotate(-45deg) translate(1px, -1px);
}

/*By clicking the button, the bars turn into the parallel state. To make that, we will use jQuery to toggle .active class on the button.
This class cancels the rotation of the bars and makes them all visible.*/

#sidebarCollapse.active span {
    /* no rotation */
    transform: none;
    /* all bars are visible */
    opacity: 1;
    margin: 5px auto;
}

/*Now, let's add some 3D CSS animation to the sidebar.

We'll make a door-opening animation when the user closes or opens the sidebar.

First of all, we should add perspective property to the container. Our container in this case is .wrapper.
The perspective property defines how many pixels a 3D element is placed from the view and allows you to change the perspective on how 3D elements are viewed.

Then, we'll rotate the sidebar vertically by 100 degrees during collapsing out using transform property.

The transform-origin property allows you to change the position of transformed elements. Here we'll rotate the sidebar from the center left side.*/

.wrapper {
    display: flex;
    align-items: stretch;
    perspective: 1500px;
}

#sidebar {
    min-width: 250px;
    max-width: 250px;
    background: #7386D5;
    color: #fff;
    transition: all 0.6s cubic-bezier(0.945, 0.020, 0.270, 0.665);
    transform-origin: center left; /* Set the transformed position of sidebar to center left side. */
}

#sidebar.active {
    margin-left: -250px;
    transform: rotateY(100deg); /* Rotate sidebar vertically by 100 degrees. */
}


/*Media Queries
On smaller screens, the sidebar will be collapsed out by default. The default state of the hamburger menu should be returned to the parallel state.
To achieve this, we should switch the CSS rules from  the standard view.*/

@media (max-width: 768px) {
    /* Reversing the behavior of the sidebar:
       it'll be rotated vertically and off canvas by default,
       collapsing in on toggle button click with removal of
       the vertical rotation.   */
    #sidebar {
        margin-left: -250px;
        transform: rotateY(100deg);
    }
    #sidebar.active {
        margin-left: 0;
        transform: none;
    }

    /* Reversing the behavior of the bars:
       Removing the rotation from the first,
       last bars and reappear the second bar on default state,
       and giving them a vertical margin */
    #sidebarCollapse span:first-of-type,
    #sidebarCollapse span:nth-of-type(2),
    #sidebarCollapse span:last-of-type {
        transform: none;
        opacity: 1;
        margin: 5px auto;
    }

    /* Removing the vertical margin and make the first and last bars rotate again when the sidebar is open, hiding the second bar */
    #sidebarCollapse.active span {
        margin: 0 auto;
    }
    #sidebarCollapse.active span:first-of-type {
        transform: rotate(45deg) translate(2px, 2px);
    }
    #sidebarCollapse.active span:nth-of-type(2) {
        opacity: 0;
    }
    #sidebarCollapse.active span:last-of-type {
        transform: rotate(-45deg) translate(1px, -1px);
    }
}
